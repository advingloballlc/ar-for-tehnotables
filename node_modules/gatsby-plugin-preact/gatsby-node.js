"use strict";

exports.__esModule = true;
exports.onCreateBabelConfig = onCreateBabelConfig;
exports.onCreateWebpackConfig = onCreateWebpackConfig;

const PreactRefreshPlugin = require(`@prefresh/webpack`);

function onCreateBabelConfig({
  actions,
  stage
}) {
  if (stage === `develop`) {
    // enable react-refresh babel plugin to enable hooks
    // @see https://github.com/JoviDeCroock/prefresh/tree/master/packages/webpack#using-hooks
    actions.setBabelPlugin({
      name: `@prefresh/babel-plugin`,
      stage
    });
  }
}

function onCreateWebpackConfig({
  stage,
  actions,
  getConfig
}) {
  var _webpackConfig$resolv;

  const webpackPlugins = [];
  const webpackConfig = getConfig();

  if ((_webpackConfig$resolv = webpackConfig.resolve) !== null && _webpackConfig$resolv !== void 0 && _webpackConfig$resolv.alias) {
    delete webpackConfig.resolve.alias.react;
    delete webpackConfig.resolve.alias[`react-dom`];
  }

  if (stage === `develop`) {
    webpackPlugins.push(new PreactRefreshPlugin({
      overlay: {
        module: require.resolve(`gatsby/dist/utils/fast-refresh-module`)
      }
    })); // remove React refresh plugin, we want to add preact refresh instead.

    webpackConfig.plugins = webpackConfig.plugins.filter(plugin => plugin.constructor.name !== `ReactRefreshPlugin`); // add webpack-hot-middleware/client to the commons entry

    webpackConfig.entry.commons.unshift(`@gatsbyjs/webpack-hot-middleware/client`);
  } // add preact to the framework bundle


  if (stage === `build-javascript` || stage === `develop`) {
    var _webpackConfig$optimi, _webpackConfig$optimi2, _webpackConfig$optimi3, _webpackConfig$optimi4;

    if (webpackConfig !== null && webpackConfig !== void 0 && (_webpackConfig$optimi = webpackConfig.optimization) !== null && _webpackConfig$optimi !== void 0 && (_webpackConfig$optimi2 = _webpackConfig$optimi.splitChunks) !== null && _webpackConfig$optimi2 !== void 0 && (_webpackConfig$optimi3 = _webpackConfig$optimi2.cacheGroups) !== null && _webpackConfig$optimi3 !== void 0 && (_webpackConfig$optimi4 = _webpackConfig$optimi3.framework) !== null && _webpackConfig$optimi4 !== void 0 && _webpackConfig$optimi4.test) {
      const frameworkRegex = webpackConfig.optimization.splitChunks.cacheGroups.framework.test; // replace react libs with preact

      webpackConfig.optimization.splitChunks.cacheGroups.framework.test = module => /(?<!node_modules.*)[\\/]node_modules[\\/](preact)[\\/]/.test(module.resource) || frameworkRegex.test(module.resource);
    }
  }

  actions.replaceWebpackConfig(webpackConfig);
  actions.setWebpackConfig({
    resolve: {
      alias: {
        react: `preact/compat`,
        "react-dom/test-utils": `preact/test-utils`,
        "react-dom": `preact/compat`,
        "react/jsx-runtime": `preact/jsx-runtime`
      }
    },
    plugins: webpackPlugins
  });
}