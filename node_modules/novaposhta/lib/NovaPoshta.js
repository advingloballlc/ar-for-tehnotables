"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Model = _interopRequireDefault(require("./Model"));

var _Schema = _interopRequireDefault(require("./Schema"));

var _Errors = _interopRequireDefault(require("./Errors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _default = function () {
  var privateProps = new WeakMap();

  var NovaPoshta = /*#__PURE__*/function () {
    function NovaPoshta() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, NovaPoshta);

      var self = this;
      self.apiKey = options.apiKey || '';
      self.endpoint = options.endpoint || 'https://api.novaposhta.ua/v2.0/json/';
      self.logger = options.logger || false;
      var models = {};
      Object.keys(_Schema.default).forEach(function (model) {
        var key = model.toLowerCase().substring(0, 1) + model.substring(1);
        models[key] = new _Model.default(self, model, _Schema.default[model]);
      });
      privateProps.set(self, models);
    }

    _createClass(NovaPoshta, [{
      key: "log",
      value: function log(message) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';

        if (this.logger) {
          this.logger.log(type, message, params);
        }
      }
    }, {
      key: "_request",
      value: function _request(params) {
        var self = this;
        var args = {
          method: 'POST',
          body: JSON.stringify(_objectSpread(_objectSpread({}, params), {}, {
            apiKey: self.apiKey
          }))
        };
        return new Promise(function (resolve, reject) {
          var onError = function onError(errors, data) {
            self.log("NovaPoshta::".concat(params.calledMethod, " request failed"), {
              params: params,
              errors: errors
            }, 'error');
            reject(errors, data);
          };

          fetch(self.endpoint, args).then(function (response) {
            if (response.ok) {
              response.json().then(function (json) {
                if (json.success) {
                  self.log("NovaPoshta::".concat(params.calledMethod, " request executed"), {
                    params: params,
                    response: json
                  }, 'info');
                  resolve(json, response);
                } else {
                  var errors = [];
                  json.errors.forEach(function (message, i) {
                    var code = json.errorCodes[i];
                    errors.push({
                      code: code,
                      message: message,
                      en: _Errors.default[code] || '',
                      ru: _Errors.default[code] || '',
                      uk: _Errors.default[code] || ''
                    });
                  });
                  onError(errors, json);
                }
              }).catch(function (error) {
                onError([{
                  message: error.toString()
                }], null);
              });
            } else {
              onError([{
                message: response.statusText
              }], null);
            }
          }).catch(function (error) {
            onError([{
              message: error.toString()
            }], null);
          });
        });
      }
    }, {
      key: "address",
      get: function get() {
        return privateProps.get(this).address;
      }
    }, {
      key: "common",
      get: function get() {
        return privateProps.get(this).common;
      }
    }, {
      key: "counterparty",
      get: function get() {
        return privateProps.get(this).counterparty;
      }
    }, {
      key: "contactPerson",
      get: function get() {
        return privateProps.get(this).contactPerson;
      }
    }, {
      key: "internetDocument",
      get: function get() {
        return privateProps.get(this).internetDocument;
      }
    }, {
      key: "scanSheet",
      get: function get() {
        return privateProps.get(this).scanSheet;
      }
    }, {
      key: "additionalService",
      get: function get() {
        return privateProps.get(this).additionalService;
      }
    }, {
      key: "additionalServiceGeneral",
      get: function get() {
        return privateProps.get(this).additionalServiceGeneral;
      }
    }]);

    return NovaPoshta;
  }();

  NovaPoshta.version = '1.1.0';
  return NovaPoshta;
}();

exports.default = _default;