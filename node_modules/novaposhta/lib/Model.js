"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Model = /*#__PURE__*/function () {
  function Model(api, model, methods) {
    _classCallCheck(this, Model);

    var self = this;
    self.api = api;
    methods.forEach(function (method) {
      var schema = typeof method === 'string' ? {
        method: method
      } : method;

      if (schema.alias) {
        self[schema.method] = self[schema.alias];
      } else {
        var _self$_requestDepreca, _self$_request;

        var params = [self, schema.model || model, schema.method];
        self[schema.method] = schema.deprecated ? (_self$_requestDepreca = self._requestDeprecated).bind.apply(_self$_requestDepreca, params) : (_self$_request = self._request).bind.apply(_self$_request, params);
      }
    });
  }

  _createClass(Model, [{
    key: "_requestDeprecated",
    value: function _requestDeprecated(modelName, calledMethod) {
      var methodProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.api.log("".concat(modelName, "::").concat(calledMethod, " is deprecated, it will be removed in a next version"), {}, 'warn');

      this._request(modelName, calledMethod, methodProperties);
    }
  }, {
    key: "_request",
    value: function _request(modelName, calledMethod) {
      var methodProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.api._request({
        modelName: modelName,
        calledMethod: calledMethod,
        methodProperties: methodProperties
      });
    }
  }]);

  return Model;
}();

var _default = Model;
exports.default = _default;